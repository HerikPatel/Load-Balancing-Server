0) Gazal Arora ga319
   Herik Patel hdp48
1) We implemented our ls.py such that it would send a query from the client to both ts1.py and ts2.py servers. Then it would try to receive a response from ts1 server. If it received a response from ts1 server then ls sends this response as is to the client. But if ls doesn't receive a response from ts1 server then it has a timeouut of 2.5 seconds after which ls tries to receive a response from ts2 server. If ls receives a response from ts2 server then ls sends this response	as is to the client. But if ls doesn't receive a response from ts2 server then it has another timeout of 2.5 seconds after which ls send an error message to the client. Overall, if ls doesn't receive a response from ts1 and ts2 then it times out for a total of 5 seconds. If ls doesn't receive a response from ts1 but receives a response from ts2 then the total timeout is 2.5 seconds(timeout for ts1 not responding).
2) All functions and code is working to the best of our knowledge
3) We had difficulty distributing the total timeout amongst both servers. Letting each server timeout for 5 seconds would make the total timeout to be 10 seconds for a hostname which wasn't found in either of the servers. Since we wanted the total timeout to be 5 seconds for a hostname which wasn't found in either of the servers, we decided to timeout ts1 for 2.5 seconds and ts2 for 2.5 seconds in order to total a 5 second timeout for a hostname that is not present in ts1 and ts2.
4) We learned to divide hostnames between multiple servers in order to balance the amount of hostnames on one single server. When there is a large scale of hostnames to be stored with their IP addresses, dividing load between multiple servers helps get a quicker responses from each server as each server has a smaller amount of DNS enteries. 
